<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tom Cant</title><link>https://tomcant.dev/</link><description>Recent content on Tom Cant</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 03 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://tomcant.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Using AWS SSM for Shell Access on EC2 Without Internet Access</title><link>https://tomcant.dev/posts/2024/05/using-aws-ssm-for-shell-access-on-ec2-without-internet-access/</link><pubDate>Fri, 03 May 2024 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2024/05/using-aws-ssm-for-shell-access-on-ec2-without-internet-access/</guid><description>&lt;p>I&amp;rsquo;ve recently been working on a personal project that uses a Postgres relational database for persistence.
I&amp;rsquo;m running the project on AWS and using EC2 instead of RDS to keep costs down.
I need shell access to the instance for inspecting configuration, but it&amp;rsquo;s attached to a private subnet and has no public IP.&lt;/p></description></item><item><title>Building a Chess AI, Part 3 – Evaluation</title><link>https://tomcant.dev/posts/2023/06/building-a-chess-ai-part-3-evaluation/</link><pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2023/06/building-a-chess-ai-part-3-evaluation/</guid><description>This is the third post in a series I&amp;rsquo;ve been writing about building a chess engine. The last post was about &lt;a href="https://tomcant.dev/posts/2023/05/building-a-chess-ai-part-2-move-generation/">move generation&lt;/a>, and in this post I&amp;rsquo;m going to write about how the engine decides who&amp;rsquo;s winning.</description></item><item><title>Building a Chess AI, Part 2 – Move Generation</title><link>https://tomcant.dev/posts/2023/05/building-a-chess-ai-part-2-move-generation/</link><pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2023/05/building-a-chess-ai-part-2-move-generation/</guid><description>In my last post &lt;a href="https://tomcant.dev/posts/2023/03/building-a-chess-ai-part-1-game-state/">I wrote about modelling game state&lt;/a>, the first milestone of a project I&amp;rsquo;ve been working on to build a chess engine in Rust. In this post I&amp;rsquo;m going to write an overview of the second milestone: move generation.</description></item><item><title>Building a Chess AI, Part 1 – Game State</title><link>https://tomcant.dev/posts/2023/03/building-a-chess-ai-part-1-game-state/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2023/03/building-a-chess-ai-part-1-game-state/</guid><description>I&amp;rsquo;ve been saying for years that when I get a bit of spare time I&amp;rsquo;d like to build a chess AI, or &lt;a href="https://en.wikipedia.org/wiki/Chess_engine">chess engine&lt;/a> as it is more commonly known. So a few months ago I set out to do just that and this post is an overview of the project&amp;rsquo;s first major milestone: modelling game state.</description></item><item><title>Puzzle Programming with Python</title><link>https://tomcant.dev/posts/2023/01/puzzle-programming-with-python/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2023/01/puzzle-programming-with-python/</guid><description>&lt;p>For the last few years I&amp;rsquo;ve been taking part in the &lt;a href="https://adventofcode.com/">Advent of Code&lt;/a> programming contest.
It&amp;rsquo;s been a great way to improve my problem-solving skills and can really aid in getting to grips with new languages.
In 2022 &lt;a href="https://github.com/tomcant/advent-of-code/tree/main/2022/python/solutions">I chose to solve the puzzles with Python&lt;/a>, and having enjoyed using the language so much I decided to write about some of the features that I think make it great for this type of programming.&lt;/p></description></item><item><title>Managing Deployment Stages with Workspaces in Terraform Cloud</title><link>https://tomcant.dev/posts/2022/09/managing-deployment-stages-with-workspaces-in-terraform-cloud/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2022/09/managing-deployment-stages-with-workspaces-in-terraform-cloud/</guid><description>&lt;p>When using Terraform to manage resources across deployment stages (e.g. staging, prod), it can be useful to have the name of the stage for inclusion in resource naming, such as domain names, S3 bucket names, etc.&lt;/p></description></item><item><title>Codifying Authentication for Terraform Cloud in an AWS Control Tower Environment</title><link>https://tomcant.dev/posts/2022/06/codifying-authentication-for-terraform-cloud-in-an-aws-control-tower-environment/</link><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2022/06/codifying-authentication-for-terraform-cloud-in-an-aws-control-tower-environment/</guid><description>&lt;p>I recently stumbled upon an old diagram I drew to document part of our platform at &lt;a href="https://www.mybuilder.com">MyBuilder.com&lt;/a>,
and this got me thinking it &lt;em>could&lt;/em> be useful to share publicly. Let&amp;rsquo;s see&amp;hellip;&lt;/p></description></item><item><title>Value Objects as Map Keys in TypeScript</title><link>https://tomcant.dev/posts/2022/04/value-objects-as-map-keys-in-typescript/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2022/04/value-objects-as-map-keys-in-typescript/</guid><description>&lt;p>In &lt;a href="https://tomcant.dev/posts/2021/09/introduction-to-pathfinding-with-mazes-and-breadth-first-search/">a previous post&lt;/a> I wrote about how
JavaScript&amp;rsquo;s lack of support for value objects caused a problem when using the built-in &lt;code>Set&lt;/code> class, and how it could be
solved by using the idea of a &lt;a href="https://eddmann.com/posts/implementing-a-compound-set-in-typescript/">Compound Set&lt;/a>
instead. In this post I&amp;rsquo;m going to describe a similar solution I&amp;rsquo;ve been using for the built-in &lt;code>Map&lt;/code> class.&lt;/p></description></item><item><title>Handling Redirects with CloudFront Functions</title><link>https://tomcant.dev/posts/2022/03/handling-redirects-with-cloudfront-functions/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2022/03/handling-redirects-with-cloudfront-functions/</guid><description>&lt;p>Over the years we&amp;rsquo;ve seen countless methods for handling redirects in web applications. From the Apache rewrite rule to
AWS ALBs, Lambda@Edge, and even with S3 object metadata. In this post I&amp;rsquo;m going to share yet another method that we&amp;rsquo;ve
recently started using at MyBuilder: CloudFront Functions.&lt;/p></description></item><item><title>Introduction to Pathfinding with Mazes and Breadth-first Search</title><link>https://tomcant.dev/posts/2021/09/introduction-to-pathfinding-with-mazes-and-breadth-first-search/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/09/introduction-to-pathfinding-with-mazes-and-breadth-first-search/</guid><description>&lt;p>As with many programmers wanting to sharpen their problem-solving skills, I&amp;rsquo;ve recently been tackling &lt;a href="https://adventofcode.com">Advent of Code&lt;/a>,
a digital Advent calendar in which each day presents an increasingly difficult puzzle to solve. Having completed the
2016 calendar, which &lt;a href="https://adventofcode.com/2016/day/11">involved&lt;/a> &lt;a href="https://adventofcode.com/2016/day/13">several&lt;/a>
&lt;a href="https://adventofcode.com/2016/day/22">pathfinding&lt;/a> &lt;a href="https://adventofcode.com/2016/day/24">problems&lt;/a>, I&amp;rsquo;ve become
obsessed with mazes and pathfinding algorithms.&lt;/p></description></item><item><title>Queueing with TypeScript</title><link>https://tomcant.dev/posts/2021/08/queueing-with-typescript/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/08/queueing-with-typescript/</guid><description>&lt;p>I&amp;rsquo;ve recently spent more time than I&amp;rsquo;d like to admit solving programming puzzles, and the queue data structure seems to
be a reoccurring theme. JavaScript doesn&amp;rsquo;t have a built-in implementation, so I find myself copy/pasting the same few
lines of code everywhere. I&amp;rsquo;ve decided it&amp;rsquo;s time to put that snippet somewhere more accessible.&lt;/p></description></item><item><title>Solving Sudoku with C++, WASM and React</title><link>https://tomcant.dev/posts/2021/06/solving-sudoku-with-cpp-and-react/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/06/solving-sudoku-with-cpp-and-react/</guid><description>&lt;p>In a &lt;a href="https://tomcant.dev/posts/2021/04/running-cpp-in-a-web-browser-with-webassembly/">previous post&lt;/a> I talked about rebuilding some
old C++ projects with WebAssembly and running them in a web browser. One such project was a Sudoku solver, and I want to
share some recent progress in this post.&lt;/p></description></item><item><title>Running C++ in a Web Browser with WASM</title><link>https://tomcant.dev/posts/2021/04/running-cpp-in-a-web-browser-with-webassembly/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/04/running-cpp-in-a-web-browser-with-webassembly/</guid><description>&lt;p>I recently started looking into compiling and running C++ for the web as a way to give some &lt;a href="https://github.com/tomcant/tic-tac-toe-ai">old&lt;/a>
&lt;a href="https://github.com/tomcant/sudoku-solver">projects&lt;/a> a much-needed makeover. In this post we&amp;rsquo;ll look at some basic
examples of compiling C++ and running it in a web browser.&lt;/p></description></item></channel></rss>