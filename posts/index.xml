<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Tom Cant</title><link>https://tomcant.dev/posts/</link><description>Recent content in Posts on Tom Cant</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 16 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tomcant.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Value Objects as Map Keys in TypeScript</title><link>https://tomcant.dev/posts/2022/04/value-objects-as-map-keys-in-typescript/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2022/04/value-objects-as-map-keys-in-typescript/</guid><description>&lt;p>In &lt;a href="https://tomcant.dev/posts/2021/09/introduction-to-pathfinding-with-mazes-and-breadth-first-search/">a previous post&lt;/a> I wrote about how
JavaScript&amp;rsquo;s lack of support for value objects caused a problem when using the built-in &lt;code>Set&lt;/code> class, and how it could be
solved by using the idea of a &lt;a href="https://eddmann.com/posts/implementing-a-compound-set-in-typescript/">Compound Set&lt;/a>
instead. In this post I&amp;rsquo;m going to describe a similar solution I&amp;rsquo;ve been using for the built-in &lt;code>Map&lt;/code> class.&lt;/p></description></item><item><title>Handling Redirects with CloudFront Functions</title><link>https://tomcant.dev/posts/2022/03/handling-redirects-with-cloudfront-functions/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2022/03/handling-redirects-with-cloudfront-functions/</guid><description>&lt;p>Over the years we&amp;rsquo;ve seen countless methods for handling redirects in web applications. From the Apache rewrite rule to
AWS ALBs, Lambda@Edge, and even with S3 object metadata. In this post I&amp;rsquo;m going to share yet another method that we&amp;rsquo;ve
recently started using at MyBuilder: CloudFront Functions.&lt;/p></description></item><item><title>Introduction to Pathfinding with Mazes and Breadth-first Search</title><link>https://tomcant.dev/posts/2021/09/introduction-to-pathfinding-with-mazes-and-breadth-first-search/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/09/introduction-to-pathfinding-with-mazes-and-breadth-first-search/</guid><description>&lt;p>As with many programmers wanting to sharpen their problem-solving skills, I&amp;rsquo;ve recently been tackling &lt;a href="https://adventofcode.com">Advent of Code&lt;/a>,
a digital Advent calendar in which each day presents an increasingly difficult puzzle to solve. Having completed the
2016 calendar, which &lt;a href="https://adventofcode.com/2016/day/11">involved&lt;/a> &lt;a href="https://adventofcode.com/2016/day/13">several&lt;/a>
&lt;a href="https://adventofcode.com/2016/day/22">pathfinding&lt;/a> &lt;a href="https://adventofcode.com/2016/day/24">problems&lt;/a>, I&amp;rsquo;ve become
obsessed with mazes and pathfinding algorithms.&lt;/p></description></item><item><title>Queueing with TypeScript</title><link>https://tomcant.dev/posts/2021/08/queueing-with-typescript/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/08/queueing-with-typescript/</guid><description>&lt;p>I&amp;rsquo;ve recently spent more time than I&amp;rsquo;d like to admit solving programming puzzles, and the queue data structure seems to
be a reoccurring theme. JavaScript doesn&amp;rsquo;t have a built-in implementation, so I find myself copy/pasting the same few
lines of code everywhere. I&amp;rsquo;ve decided it&amp;rsquo;s time to put that snippet somewhere more accessible.&lt;/p></description></item><item><title>Solving Sudoku with C++, WASM and React</title><link>https://tomcant.dev/posts/2021/06/solving-sudoku-with-cpp-and-react/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/06/solving-sudoku-with-cpp-and-react/</guid><description>&lt;p>In a &lt;a href="https://tomcant.dev/posts/2021/04/running-cpp-in-a-web-browser-with-webassembly/">previous post&lt;/a> I talked about rebuilding some
old C++ projects with WebAssembly and running them in a web browser. One such project was a Sudoku solver, and I want to
share some recent progress in this post.&lt;/p></description></item><item><title>Running C++ in a Web Browser with WASM</title><link>https://tomcant.dev/posts/2021/04/running-cpp-in-a-web-browser-with-webassembly/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://tomcant.dev/posts/2021/04/running-cpp-in-a-web-browser-with-webassembly/</guid><description>&lt;p>I recently started looking into compiling and running C++ for the web as a way to give some &lt;a href="https://github.com/tomcant/tic-tac-toe-ai">old&lt;/a>
&lt;a href="https://github.com/tomcant/sudoku-solver">projects&lt;/a> a much-needed makeover. In this post we&amp;rsquo;ll look at some basic
examples of compiling C++ and running it in a web browser.&lt;/p></description></item></channel></rss>